using System.Globalization;
using System.Text;

namespace RazerSdkReader.Generators;

public static class StructGenerator
{
    public static string Generate(StructInfo structInfo)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Runtime.InteropServices;");
        sb.AppendLine();
        sb.AppendLine($"namespace {structInfo.Namespace};");
        sb.AppendLine();
        sb.AppendLine("[StructLayout(LayoutKind.Sequential, Pack = 1)]");
        sb.AppendLine($"public readonly partial record struct {structInfo.ParentStruct}");
        sb.AppendLine("{");

        var digits = structInfo.Count.ToString(CultureInfo.InvariantCulture).Length;
        var format = "D" + digits;
        for (int i = 0; i < structInfo.Count; i++)
        {
            sb.AppendLine($"    public readonly {structInfo.ChildStruct} Child{i.ToString(format)};");
        }

        sb.AppendLine();
        sb.AppendLine($"    public {structInfo.ChildStruct} this[int index] => index switch");
        sb.AppendLine("    {");
        for (int i = 0; i < structInfo.Count; i++)
        {
            sb.AppendLine($"        {i} => Child{i.ToString(format)},");
        }

        sb.AppendLine($"        _ => throw new IndexOutOfRangeException()");
        sb.AppendLine("    };");
        sb.AppendLine("}");

        return sb.ToString();
    }
}